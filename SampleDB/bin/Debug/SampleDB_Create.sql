/*
Deployment script for SampleDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "SampleDB"
:setvar DefaultFilePrefix "SampleDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[States]...';


GO
CREATE TABLE [dbo].[States] (
    [Id]        INT          NOT NULL,
    [StateName] VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_States] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Contacts]...';


GO
CREATE TABLE [dbo].[Contacts] (
    [Id]        INT          IDENTITY (1, 1) NOT NULL,
    [FirstName] VARCHAR (50) NULL,
    [LastName]  VARCHAR (50) NULL,
    [Email]     VARCHAR (50) NULL,
    [Company]   VARCHAR (50) NULL,
    [Title]     VARCHAR (50) NULL,
    CONSTRAINT [PK_Contacts] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Addresses]...';


GO
CREATE TABLE [dbo].[Addresses] (
    [Id]            INT          IDENTITY (1, 1) NOT NULL,
    [ContactId]     INT          NOT NULL,
    [AddressType]   VARCHAR (10) NOT NULL,
    [StreetAddress] VARCHAR (50) NOT NULL,
    [City]          VARCHAR (50) NOT NULL,
    [StateId]       INT          NOT NULL,
    [PostalCode]    VARCHAR (20) NOT NULL,
    CONSTRAINT [PK_Addresses] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Addresses_Contacts]...';


GO
ALTER TABLE [dbo].[Addresses]
    ADD CONSTRAINT [FK_Addresses_Contacts] FOREIGN KEY ([ContactId]) REFERENCES [dbo].[Contacts] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Addresses_States]...';


GO
ALTER TABLE [dbo].[Addresses]
    ADD CONSTRAINT [FK_Addresses_States] FOREIGN KEY ([StateId]) REFERENCES [dbo].[States] ([Id]);


GO
PRINT N'Creating [dbo].[SaveContact]...';


GO
create procedure [dbo].[SaveContact]
	@Id     	int output,
	@FirstName	varchar(50),
	@LastName	varchar(50),	
	@Company	varchar(50),
	@Title		varchar(50),
	@Email		varchar(50)
AS
BEGIN
	UPDATE	Contacts
	SET		FirstName = @FirstName,
			LastName  = @LastName,
			Company   = @Company,
			Title     = @Title,
			Email     = @Email
	WHERE	Id        = @Id

	IF @@ROWCOUNT = 0
	BEGIN
		INSERT INTO [dbo].[Contacts]
           ([FirstName]
           ,[LastName]
           ,[Company]
           ,[Title]
           ,[Email])
		VALUES
           (@FirstName,
           @LastName, 
           @Company,
           @Title,
           @Email);
		SET @Id = cast(scope_identity() as int)
	END;
END;
GO
PRINT N'Creating [dbo].[SaveAddress]...';


GO
CREATE procedure [dbo].[SaveAddress]
	@Id            int output,
	@ContactId     int,
	@AddressType   varchar(10),
	@StreetAddress varchar(50),
	@City          varchar(50),
	@StateId       int,
	@PostalCode    varchar(20)
AS
BEGIN
	UPDATE	Addresses
	SET		ContactId     = @ContactId,
	        AddressType   = @AddressType,
	        StreetAddress = @StreetAddress,
			City          = @City,
			StateId       = @StateId,
			PostalCode    = @PostalCode
	WHERE	Id            = @Id

	IF @@ROWCOUNT = 0
	BEGIN
		INSERT INTO Addresses
		(ContactId, AddressType, StreetAddress, City, StateId, PostalCode)
		VALUES (@ContactId, @AddressType, @StreetAddress, @City, @StateId, @PostalCode);
		
		SET @Id = cast(scope_identity() as int)
	END;
END;
GO
PRINT N'Creating [dbo].[GetContact]...';


GO
CREATE procedure [dbo].[GetContact]
	@Id int
AS
BEGIN
	SELECT [Id]
		  ,[FirstName]
		  ,[LastName]
		  ,[Company]
		  ,[Title]
		  ,[Email]
	  FROM [dbo].[Contacts]
	WHERE Id = @Id;

	SELECT 
		Id,
		ContactId,
		AddressType,
		StreetAddress,
		City,
		StateId,
		PostalCode
	FROM [dbo].[Addresses] 
	WHERE ContactID = @Id;

END
GO
PRINT N'Creating [dbo].[DeleteContact]...';


GO
CREATE PROCEDURE [dbo].[DeleteContact]
	@Id int
AS
BEGIN
	DELETE FROM Contacts
	WHERE Id = @Id;
END;
GO
PRINT N'Creating [dbo].[DeleteAddress]...';


GO
CREATE PROCEDURE [dbo].[DeleteAddress]
	@Id int
AS
BEGIN
	DELETE FROM Addresses WHERE Id = @Id;
END;
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT [dbo].[States] ([Id], [StateName]) VALUES (1, N'Alabama')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (2, N'Alaska')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (4, N'Arizona')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (5, N'Arkansas')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (6, N'California')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (8, N'Colorado')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (9, N'Connecticut')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (10, N'Delaware')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (11, N'District of Columbia')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (12, N'Florida')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (13, N'Georgia')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (15, N'Hawaii')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (16, N'Idaho')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (17, N'Illinois')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (18, N'Indiana')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (19, N'Iowa')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (20, N'Kansas')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (21, N'Kentucky')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (22, N'Louisiana')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (23, N'Maine')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (24, N'Maryland')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (25, N'Massachusetts')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (26, N'Michigan')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (27, N'Minnesota')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (28, N'Mississippi')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (29, N'Missouri')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (30, N'Montana')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (31, N'Nebraska')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (32, N'Nevada')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (33, N'New Hampshire')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (34, N'New Jersey')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (35, N'New Mexico')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (36, N'New York')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (37, N'North Carolina')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (38, N'North Dakota')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (39, N'Ohio')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (40, N'Oklahoma')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (41, N'Oregon')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (42, N'Pennsylvania')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (44, N'Rhode Island')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (45, N'South Carolina')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (46, N'South Dakota')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (47, N'Tennessee')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (48, N'Texas')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (49, N'Utah')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (50, N'Vermont')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (51, N'Virginia')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (53, N'Washington')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (54, N'West Virginia')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (55, N'Wisconsin')
INSERT [dbo].[States] ([Id], [StateName]) VALUES (56, N'Wyoming')



/***** SEED DATA FOR CONTACTS TABLE *****/


INSERT INTO [Contacts] VALUES ('Michael', 'Jordan', 'michael@bulls.com', 'Chicago Bulls', 'MVP');
INSERT INTO [Contacts] VALUES ('LaBron', 'James', 'labron@heat.com', 'Miami Heat', 'King James');
INSERT INTO [Contacts] VALUES ('Kobe', 'Bryant', 'kobe@lakers.com', 'Los Angeles Lakers', 'Guard');
INSERT INTO [Contacts] VALUES ('Kevin', 'Durant', 'kevin@thunder.com', 'OKC Thunder', 'Durantula');
INSERT INTO [Contacts] VALUES ('Kyrie', 'Irving', 'kyrie@cavs.com', 'Cleveland Cavaliers', 'Uncle Drew');
INSERT INTO [Contacts] VALUES ('Chris', 'Paul', 'chris@clippers.com', 'Los Angeles Clippers', 'CP3');



/***** SEED DATA FOR ADDRESSES TABLE *****/
INSERT INTO [Addresses] VALUES(1, 'Home', '123 Main Street', 'Chicago', 17, '60290');
INSERT INTO [Addresses] VALUES(1, 'Work', '1901 W Madison St', 'Chicago', 17, '60612');
INSERT INTO [Addresses] VALUES(2, 'Home', '123 Main Street', 'Miami', 12, '33101');
INSERT INTO [Addresses] VALUES(3, 'Home', '123 Main Street', 'Los Angeles', 6, '90001');
INSERT INTO [Addresses] VALUES(4, 'Home', '123 Main Street', 'Oklahoma City', 40, '73101');
INSERT INTO [Addresses] VALUES(5, 'Home', '123 Main Street', 'Cleveland', 39, '44101');
INSERT INTO [Addresses] VALUES(6, 'Home', '456 Main Street', 'Los Angeles', 6, '90003');
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
